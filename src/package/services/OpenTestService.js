function saveOpenTestKeywords(response, data, userDetails){

   var openTestKeys   =  data.openTestKeys;
   var openTestparsed =  JSON.parse(JSON.stringify(openTestKeys));
   var  keyId = openTestparsed.keyId;
    var keyType= openTestparsed.keyword_type;
    if(openTestparsed.args==undefined){
        openTestparsed.args=[];
    }
     global.appConstants.dbConstants.tableObj.openTestKeywords.find({id:keyId}, function(err, keyWordExist) {
        if(err){
            console.log(err);
          global.errorLog.error(err);
          var resp={
              msg:global.errorDescs.errorDesc.desc.DB_IO_ERROR,
              code:global.errorCodes.errorCode.codes.DB_IO_ERROR
          }
          response.end(JSON.stringify(resp));
        }else if(keyWordExist.length>0) {
            keyWordExist[0].keyword_name=openTestparsed.keyname;
            keyWordExist[0].keyword_action=openTestparsed.keyAction;
            keyWordExist[0].keyword_description=openTestparsed.keyDesc;
            keyWordExist[0].key_args=openTestparsed.args;
            keyWordExist[0].keyword_type=openTestparsed.keyword_type;
            keyWordExist[0].save(function(err){
               if(err){
                    global.errorLog.error(err);
                    var resp={
                        msg:global.errorDescs.errorDesc.desc.DB_IO_ERROR,
                        code:global.errorCodes.errorCode.codes.DB_IO_ERROR
                    }
                    response.end(JSON.stringify(resp));
               }else{
                global.appConstants.dbConstants.tableObj.openTestKeywords.find({keyword_type:keyType}, function(err, keyWords) {
                    if(err){
                        global.errorLog.error(err);
                        var resp={
                            msg:global.errorDescs.errorDesc.desc.DB_IO_ERROR,
                            code:global.errorCodes.errorCode.codes.DB_IO_ERROR
                        }
                        response.end(JSON.stringify(resp));
                    }else{
                        var globalResp={
                            msg:global.errorDescs.errorDesc.desc.SUCCESS,
                            code:"200",
                            data:keyWords
                        }
                        response.end(JSON.stringify(globalResp));
                    } 
                
                 });
               }
            });
        }else{
            var keydetailsarr=[]; 
            if(openTestKeys.args==undefined){
                openTestKeys.args=[];
            }
            var keydetails ={
                keyword_name:openTestKeys.keyname,
                keyword_action:openTestKeys.keyAction,
                keyword_description:openTestKeys.keyDesc,
                key_args:openTestKeys.args,
                keyword_type:openTestKeys.keyword_type
               }
               keydetailsarr.push(keydetails);
           

            global.appConstants.dbConstants.tableObj.openTestKeywords.create(keydetailsarr, function (err, items) {
                if(err){
                    global.errorLog.error(err);
                    var resp={
                        msg:global.errorDescs.errorDesc.desc.DB_IO_ERROR,
                        code:global.errorCodes.errorCode.codes.DB_IO_ERROR
                    }
                    response.end(JSON.stringify(resp));
                }else{
                   
                    global.appConstants.dbConstants.tableObj.openTestKeywords.find({keyword_type:keyType}, function(err, keyWords) {
                        if(err){
                            global.errorLog.error(err);
                            var resp={
                                msg:global.errorDescs.errorDesc.desc.DB_IO_ERROR,
                                code:global.errorCodes.errorCode.codes.DB_IO_ERROR
                            }
                            response.end(JSON.stringify(resp));
                        }else{
                            var globalResp={
                                msg:global.errorDescs.errorDesc.desc.SUCCESS,
                                code:"200",
                                data:keyWords
                            }
                            response.end(JSON.stringify(globalResp));
                        } 
                    
                     });
                }
             }); 

        } 

    });
           
}          
       




function getOpenTestKeywords(response, data, userDetails){
    var key_type=data.key;
    global.appConstants.dbConstants.tableObj.openTestKeywords.find({keyword_type:key_type}, function(err, keyWords) {
        if(err){
            global.errorLog.error(err);
            var resp={
                msg:global.errorDescs.errorDesc.desc.DB_IO_ERROR,
                code:global.errorCodes.errorCode.codes.DB_IO_ERROR
            }
            response.end(JSON.stringify(resp));
        }else{
            var globalResp={
                msg:global.errorDescs.errorDesc.desc.SUCCESS,
                code:"200",
                data:keyWords
            }
            response.end(JSON.stringify(globalResp));
        } 
    
     });
}

function deleteOpenTestKeyword(response, data, userDetails){
    var key_Id = data.rowId;
    var openTestKeys = data.keyType;

    global.appConstants.dbConstants.tableObj.openTestKeywords.find({id:key_Id}).remove(function (err) {
        if(err) {
            global.errorLog.error(err);
            var resp={
                msg:global.errorDescs.errorDesc.desc.DB_IO_ERROR,
                code:global.errorCodes.errorCode.codes.DB_IO_ERROR
            }
            response.end(JSON.stringify(resp));
        }else{
            global.appConstants.dbConstants.tableObj.openTestKeywords.find({keyword_type:openTestKeys}, function(err, keyWords) {
                if(err){
                    global.errorLog.error(err);
                    var resp={
                        msg:global.errorDescs.errorDesc.desc.DB_IO_ERROR,
                        code:global.errorCodes.errorCode.codes.DB_IO_ERROR
                    }
                    response.end(JSON.stringify(resp));
                }else{
                    var globalResp={
                        msg:global.errorDescs.errorDesc.desc.SUCCESS,
                        code:"200",
                        data:keyWords
                    }
                    response.end(JSON.stringify(globalResp));
                } 
            
             });  
        }
     });


}

function editgetOpenTestKeyword(response, data, userDetails){
    var key_Id = data.keyId;
    var openTestKeys = data.keyType;
    global.appConstants.dbConstants.tableObj.openTestKeywords.find({id:key_Id},function(err,keyWords) {
        if(err) {
            global.errorLog.error(err);
            var resp={
                msg:global.errorDescs.errorDesc.desc.DB_IO_ERROR,
                code:global.errorCodes.errorCode.codes.DB_IO_ERROR
            }
            response.end(JSON.stringify(resp));
        }else{
            var globalResp={
                        msg:global.errorDescs.errorDesc.desc.SUCCESS,
                        code:"200",
                        data:keyWords
                    }
                    response.end(JSON.stringify(globalResp));
              
            
        }    
        });
        

}

module.exports.service = {
    saveOpenTestKeywords: saveOpenTestKeywords,
    getOpenTestKeywords:getOpenTestKeywords,
    deleteOpenTestKeyword:deleteOpenTestKeyword,
    editgetOpenTestKeyword:editgetOpenTestKeyword
};

